module top_testbench();

    logic[31:0] writedata, dataadr;
    logic clk, reset, memwrite;

    top dut(clk, reset, writedata, dataadr, memwrite);

    initial 
    begin
            clk = 0;
            reset = 1; #20ns; 
            reset = 0; 
    end
    
    always
    begin
        #5; clk = ~clk; 
    end
    
endmodule

-----------------------------------------------------------------------------------------------------------------------------

module top  (input   logic 	 clk, reset,            
	     output  logic[31:0] writedata, dataadr,            
	     output  logic       memwrite);  

   logic [31:0] pc, instr, readdata;    

   // instantiate processor and memories  
   mips mips (clk, reset, pc, instr, memwrite, dataadr, writedata, readdata);  
   imem imem (pc[7:2], instr);  
   dmem dmem (clk, memwrite, dataadr, writedata, readdata);

endmodule

-----------------------------------------------------------------------------------------------------------------------------

module imem ( input logic [5:0] addr, output logic [31:0] instr);

// imem is modeled as a lookup table, a stored-program byte-addressable ROM
	always_comb
	   case ({addr,2'b00})		   	// word-aligned fetch
//		address		instruction
//		-------		-----------
//		8'h00: instr = 32'h20020005;  	// disassemble, by hand 
//		8'h04: instr = 32'h2003000c;  	// or with a program,
//		8'h08: instr = 32'h2067fff7;  	// to find out what
//		8'h0c: instr = 32'h00e22025;  	// this program does!
//		8'h10: instr = 32'h00642824;
//		8'h14: instr = 32'h00a42820;
//		8'h18: instr = 32'h10a7000a;
//		8'h1c: instr = 32'h0064202a;
//		8'h20: instr = 32'h10800001;
//		8'h24: instr = 32'h20050000;
//		8'h28: instr = 32'h00e2202a;
//		8'h2c: instr = 32'h00853820;
//		8'h30: instr = 32'h00e23822;
//		8'h34: instr = 32'hac670044;
//		8'h38: instr = 32'h8c020050;
//		8'h3c: instr = 32'h08000011;
//		8'h40: instr = 32'h20020001;
//		8'h44: instr = 32'hac020054;
//		8'h48: instr = 32'h08000012;	// j 48, so it will loop here
        8'h00: instr = 32'h200f0004;    //addi $t7, $zero, 4
        8'h04: instr = 32'h20080004;    //addi $t0, $zero, 4
        8'h08: instr = 32'h2009000a;    //addi $t1, $zero, 10
        8'h0c: instr = 32'h01095020;    //add $t2, $t0, $t1
        8'h10: instr = 32'h8d4b0000;    //lw $t3, 0($t2)
        8'h14: instr = 32'hadcb0000;    //sw $t3, 0($t6)
        8'h18: instr = 32'h11e80001;    //beq $t7, $t0, 1
        8'h1c: instr = 32'h01e87822;    //sub $t7, $t7, $t0 
        8'h20: instr = 32'h0800000a;    //j 0x00000028
        8'h24: instr = 32'h01e87822;    //sub $t7, $t7, $t0
        8'h28: instr = 32'h0d280001;    //bgt $t1, $t0, 1
        8'h2c: instr = 32'h01e87822;    //sub $t7, $t7, $t0
        8'h30: instr = 32'h05000000;    //jm 0($t0)
	     default:  instr = {32{1'bx}};	// unknown address
	   endcase
endmodule

-----------------------------------------------------------------------------------------------------------------------------

module mips (input  logic        clk, reset,
             output logic[31:0]  pc,
             input  logic[31:0]  instr,
             output logic        memwrite,
             output logic[31:0]  aluout, writedata,
             input  logic[31:0]  readdata);

  logic        memtoreg, pcsrc, zero, alusrc, regdst, regwrite, jump, jm, bgt;
  logic [2:0]  alucontrol;

  controller c (instr[31:26], instr[5:0], zero, aluout, memtoreg, memwrite, pcsrc,
                        alusrc, regdst, regwrite, jump, jm, bgt, alucontrol);

  datapath dp (clk, reset, memtoreg, pcsrc, alusrc, regdst, regwrite, jump, jm, bgt,
                          alucontrol, zero, pc, instr, aluout, writedata, readdata);

endmodule

-----------------------------------------------------------------------------------------------------------------------------

module controller(input  logic[5:0] op, funct,
                  input  logic     zero, aluout,
                  output logic     memtoreg, memwrite,
                  output logic     pcsrc, alusrc,
                  output logic     regdst, regwrite,
                  output logic     jump, jm, bgt,
                  output logic[2:0] alucontrol);

   logic [1:0] aluop;
   logic       branch;
   logic [5:0] func;

   always_comb
   begin
      if(bgt) func = 6'b101010;
      else func = funct;
   end

   maindec md (op, memtoreg, memwrite, branch, alusrc, regdst, regwrite, 
		 jump, jm, bgt, aluop);

   aludec  ad (func, aluop, alucontrol);

   assign pcsrc = ((branch & zero) || (bgt & aluout));

endmodule

-----------------------------------------------------------------------------------------------------------------------------

module maindec (input logic[5:0] op, 
	              output logic memtoreg, memwrite, branch,
	              output logic alusrc, regdst, regwrite, jump, jm, bgt,
	              output logic[1:0] aluop );
   logic [10:0] controls;

   assign {regwrite, regdst, alusrc, branch, memwrite,
                memtoreg,  aluop, jump, jm, bgt} = controls;

  always_comb
    case(op)
      6'b000000: controls <= 11'b11000010000; // R-type
      6'b100011: controls <= 11'b10100100000; // LW
      6'b101011: controls <= 11'b00101000000; // SW
      6'b000100: controls <= 11'b00010001000; // BEQ
      6'b001000: controls <= 11'b10100000000; // ADDI
      6'b000010: controls <= 11'b00000000100; // J
      6'b000001: controls <= 11'b00100000010; // JM
      6'b000011: controls <= 11'b00000010001; // BGT
      default:   controls <= 11'bxxxxxxxxxxx; // illegal op
    endcase
endmodule

-----------------------------------------------------------------------------------------------------------------------------

module datapath (input  logic clk, reset, memtoreg, pcsrc, alusrc, regdst,
                 input  logic regwrite, jump, jm, bgt,
                 input  logic[2:0]  alucontrol, 
                 output logic zero, 
                 output logic[31:0] pc, 
                 input  logic[31:0] instr,
                 output logic[31:0] aluout, writedata, 
                 input  logic[31:0] readdata);

      logic [4:0]  writereg, rsinstr, rtinstr;
      logic [31:0] pcnext, temppcnext, pcnextbr, pcplus4, pcbranch;
      logic [31:0] signimm, signimmsh, srca, srcb, result;
     
      // next PC logic
      flopr #(32) pcreg(clk, reset, pcnext, pc);
      adder       pcadd1(pc, 32'b100, pcplus4);
      sl2         immsh(signimm, signimmsh);
      adder       pcadd2(pcplus4, signimmsh, pcbranch);
      mux2 #(32)  pcbrmux(pcplus4, pcbranch, pcsrc,
                          pcnextbr);
      mux2 #(32)  pcmux(pcnextbr, {pcplus4[31:28], 
                        instr[25:0], 2'b00}, jump, temppcnext);
      mux2 #(32)  finalpcmux(temppcnext, result, jm, pcnext);
    
    // register file logic
       mux2 #(5)     bgtmux1 ( instr[25:21], instr[20:16], bgt, rsinstr);
       mux2 #(5)     bgtmux2 ( instr[20:16], instr[25:21], bgt, rtinstr);
       regfile     rf (clk, regwrite, rsinstr, rtinstr, writereg,
                       result, srca, writedata);
    
       mux2 #(5)    wrmux (instr[20:16], instr[15:11], regdst, writereg);
       mux2 #(32)  resmux (aluout, readdata, memtoreg, result);
       signext         se (instr[15:0], signimm);
    
      // ALU logic
       mux2 #(32)  srcbmux (writedata, signimm, alusrc, srcb);
       alu         alu (srca, srcb, alucontrol, aluout, zero);
    
endmodule

-----------------------------------------------------------------------------------------------------------------------------

module alu(input  logic [31:0] a, b, 
           input  logic [2:0]  alucont, 
           output logic [31:0] result,
           output logic zero);

    assign zero = (result == 0);

    always_comb
        case (alucont)
            3'b000: result = a & b;
            3'b001: result = a | b;
            3'b010: result = a + b;
            3'b110: result = a - b;
            3'b111: result = a < b;
            default: result = {32{1'bx}};
    endcase
endmodule

-----------------------------------------------------------------------------------------------------------------------------